secret:
  jwt:
    anonKey: ANON_KEY
    serviceKey: ServiceKey
    secret: your-super-secret-jwt-token-with-at-least-32-characters-long
  smtp:
    username: resend
    password: API_KEY
  dashboard:
    username: supabase
    password: this_password_is_insecure_and_should_be_updated
  db:
    username:
    password:
    database: postgres
  analytics:
    apiKey: your-super-secret-and-long-logflare-key
  s3:
    keyId: keyId
    accessKey: your-super-secret-s3-access-key
    secretKey: your-super-secret-s3-secret-key
    bucket: your-super-secret-s3-bucket
    region: your-super-secret-s3-region
    endpoint: your-super-secret-s3-endpoint
    cdnUrl: your-super-secret-s3-cdn-url
  git:
    token: GIT_TOKEN

# db:
#   enabled: true
#   image:
#     tag: 15.1.0.147
#   livenessProbe:
#     exec:
#       command:
#         - pg_isready
#         - -U
#         - postgres
#     initialDelaySeconds: 3
#   persistence:
#     enabled: false

db:
  enabled: true
  image:
    repository: supabase/postgres
    tag: 15.1.0.147
  livenessProbe:
    exec:
      command:
        - pg_isready
        - -U
        - postgres
    initialDelaySeconds: 30  # Esperar 30 segundos antes de validar
    timeoutSeconds: 10       # Esperar 10 segundos antes de marcar timeout
    periodSeconds: 15        # Ejecutar cada 15 segundos
    failureThreshold: 5      # Permitir 5 fallos antes de reiniciar
  replicaCount: 1
  # service:
  #   type: ClusterIP
  #   port: 5432
  environment:
    POSTGRES_USER: ""
    POSTGRES_PASSWORD: ""
    POSTGRES_DB: "postgres"
    PGPORT: "5432"
    JWT_EXP: 3600
  persistence:
    enabled: true
    size: 10Gi
    accessModes:
      - ReadWriteOnce

studio:
  image:
    tag: 20240326-5e5586d
  environment:
    STUDIO_DEFAULT_ORGANIZATION: "My Organization"
    STUDIO_DEFAULT_PROJECT: "My Project"
    SUPABASE_PUBLIC_URL: http://example.com/
    NEXT_PUBLIC_ENABLE_LOGS: "true"
  livenessProbe:
    httpGet:
      path: /api/profile
      port: 3000
    initialDelaySeconds: 15  # Aumentado para dar más tiempo de arranque
    periodSeconds: 10         # Revisa cada 10s
    timeoutSeconds: 5         # Espera hasta 5s antes de timeout
    failureThreshold: 5       # Permite hasta 5 fallos antes de reiniciar

auth:
  image:
    tag: v2.143.0
  environment:
    API_EXTERNAL_URL: http://example.com
    GOTRUE_SITE_URL: http://example.com
    GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
    GOTRUE_MAILER_AUTOCONFIRM: "true"
    GOTRUE_SMTP_ADMIN_EMAIL: "team@mail.cuemby.net"
    GOTRUE_SMTP_HOST: ""
    GOTRUE_SMTP_PORT: ""
    GOTRUE_SMTP_SENDER_NAME: "team@mail.cuemby.net"

rest:
  image:
    tag: v12.0.1

realtime:
  image:
    tag: v2.27.5
  livenessProbe:
    httpGet:
      path: /
      port: 4000
    initialDelaySeconds: 3

meta:
  image:
    tag: v0.80.0

storage:
  image:
    tag: v0.46.4
  livenessProbe:
    httpGet:
      path: /status
      port: 5000
    initialDelaySeconds: 10
  persistence:
    enabled: true
    size: 10Gi
    accessModes:
      - ReadWriteOnce
  environment:
    DB_USER: "postgres"

imgproxy:
  image:
    tag: v3.8.0
  environment:
    IMGPROXY_ENABLE_WEBP_DETECTION: "true"
  livenessProbe:
    exec:
      command:
        - imgproxy
        - health
    initialDelaySeconds: 15  # Aumentado para dar más tiempo de arranque
    timeoutSeconds: 5         # Espera hasta 5s antes de timeout
    periodSeconds: 10         # Revisa cada 10s
    failureThreshold: 5       # Permite hasta 5 fallos antes de reiniciar
  persistence:
    enabled: false

kong:
  image:
    repository: kong
    tag: 2.8.1
  environment:
    KONG_DECLARATIVE_CONFIG: /usr/local/kong/kong.yml
    KONG_LOG_LEVEL: info
    KONG_PLUGINS: "request-transformer,cors,key-auth,acl,basic-auth"
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
    tls: []
      # - secretName: example-ingress-tls
      #   hosts:
      #     - example.com
    hosts:
      - host: example.com
        paths:
          - path: /
            pathType: Prefix

analytics:
  image:
    tag: 1.4.0
  livenessProbe:
    httpGet:
      path: /health
      port: 4000
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

vector:
  image:
    tag: 0.34.0-alpine
  livenessProbe:
    httpGet:
      path: /health
      port: 9001
    initialDelaySeconds: 3
  ## Vector requires logs from the control plane to function.
  ## This is normally stored in /var/log/pods
  ## Modify these values according to your environment.
  volumeMounts:
    - name: pod-logs
      mountPath: /var/log/pods
  volumes:
    - name: pod-logs
      hostPath:
        path: /var/log/pods

functions:
  enabled: true
  image:
    tag: v1.41.2
  service:
    type: ClusterIP
    port: 9000
  initContainers:
    image:
      repository: test
      tag: v3
  environment:
    DB_USERNAME: "supabase_functions_admin"
    DB_PORT: 5432
    DB_DRIVER: "postgresql"
    DB_SSL: "disable"
  volumeMounts:
    - name: functions-source
      mountPath: /home/deno/functions
  volumes:
    - name: functions-source
      emptyDir: {}

git:
  repoUrl: "https://github.com/cuemby/ccp-supabase.git"
  secretName: "my-git-secret"


minio:
  enabled: true
  image:
    repository: minio/minio
    tag: "latest"
  service:
    type: ClusterIP
    port: 9000
  persistence:
    enabled: true
    size: 10Gi
    accessModes:
      - ReadWriteOnce
  environment:
    MINIO_ROOT_PASSWORD: "example"
    MINIO_ROOT_USER: "admin"